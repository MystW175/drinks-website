generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  description String
  tag1        String?
  tag2        String?
  imageUrl    String
  name        String
  price       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("products")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Address       Address[]
  Order         Order[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Address {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  items  SavedAddress[]
  userId String?        @db.ObjectId
  user   User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model SavedAddress {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  buildingNo String
  street     String
  city       String
  state      String
  postalCode Int
  addressId  String  @db.ObjectId
  address    Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("savedaddress")
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber Int
  items       OrderItem[]
  userId      String?     @db.ObjectId
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDate   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("orderitems")
}
